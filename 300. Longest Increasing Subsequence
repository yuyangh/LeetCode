#include "LeetCodeLib.h"

/*
 * @lc app=leetcode id=300 lang=cpp
 *
 * [300] Longest Increasing Subsequence
 *
 * https://leetcode.com/problems/longest-increasing-subsequence/description/
 *
 * algorithms
 * Medium (40.76%)
 * Testcase Example:  '[10,9,2,5,3,7,101,18]'
 *
 * Given an integer array nums, return the length of the longest strictly increasing subsequence.
 * A subsequence is a sequence that can be derived from an array by deleting
 * some or no elements without changing the order of the remaining elements.
 * For example, [3,6,2,7] is a subsequence of the array [0,3,1,6,2,2,7].
 *
 * Example 1:
 * Input: nums = [10,9,2,5,3,7,101,18]
 * Output: 4
 * Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.
 *
 * Example 2:
 * Input: nums = [0,1,0,3,2,3]
 * Output: 4
 *
 * Example 3:
 * Input: nums = [7,7,7,7,7,7,7]
 * Output: 1
 *
 * Constraints:
 * 1 <= nums.length <= 2500
 * -104 <= nums[i] <= 104
 *
 * Follow up: Can you come up with an algorithm that runs in O(n log(n)) time complexity?
 *
 */

/*
 * Time complexity: O(n*n)
 * go through previous memorized longest length to compare
 */
class Solution {
public:
	int lengthOfLIS(vector<int> &nums) {
		if (nums.empty()) {
			return 0;
		}
		
		vector<int> dp(nums.size(), 1);
		for (int currIdx = 1; currIdx < nums.size(); ++currIdx) {
			for (int prevIdx = 0; prevIdx < currIdx; ++prevIdx) {
				if (nums[prevIdx] < nums[currIdx]) {
					dp[currIdx] = max(dp[currIdx], dp[prevIdx] + 1);
				}
			}
		}
		return *max_element(dp.begin(),dp.end());
	}
};

int main() {
	Solution solution;
	vector<int> nums;
	
	nums = {10, 9, 2, 5, 3, 7, 101, 18};
	PrintSingleResult(solution.lengthOfLIS(nums)); //4
	nums = {0, 1, 0, 3, 2, 3};
	PrintSingleResult(solution.lengthOfLIS(nums)); // 4
	nums = {7, 7, 7, 7, 7, 7, 7};
	PrintSingleResult(solution.lengthOfLIS(nums)); // 1
	
}